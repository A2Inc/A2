---

- name: Create a security group
  ec2_group:
    name: "zone_b_group"
    description: The security group from zone B
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 172.0.0.0/8
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: ec2_sec_group

- name: Create EC2 instance
  command: "aws ec2 run-instances --image-id {{ image }} --count {{inst_count}} --instance-type {{ instance_type }} --key-name {{ ec2_key_name }} --security-group-ids {{ ec2_sec_group.group_id }}  --subnet-id subnet-ba94e1e3"

- name: Sleep for 60 seconds
  pause:
    seconds: 60
   
- name: Get IP address of the newly created host so that we can further contact it
  shell: "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[State.Name,InstanceId,PublicIpAddress]' --output text | grep running | awk '{print $3}'"
  register: ec2_ip

- name: Add the newly created EC2 instance(s) to the inventory file
  lineinfile:
    dest: "{{ hosts_file }}"
    insertafter: "^#{{ server_type }}"
    line: "{{ item }} ansible_ssh_private_key_file={{ ec2_private_key_dir }} ansible_user=ubuntu"
  loop: "{{ ec2_ip.stdout_lines }}"

- name: Get IP address of the newly created host so that we can further contact it
  shell: "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[State.Name,InstanceId,PrivateIpAddress]' --output text | grep running | awk '{print $3}'"
  register: ec2_pip

- name: Add the newly created EC2 instance(s) to the group_vars file
  lineinfile:
    dest: "./group_vars/all"
    insertafter: "^#{{ server_type }}$"
    line: "    - {{ item }}"
  loop: "{{ ec2_pip.stdout_lines }}"

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item }}"
    port: 22
    state: started
  loop: "{{ ec2_ip.stdout_lines }}"
